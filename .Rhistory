extract( ctd , index_name = "kegg pathways" )[ , 1:3 ]
extract( ctd , index_name = "kegg pathways" )[ ,  ]
extract( ctd , index_name = "go terms" )[ ,  ]
extract( ctd, index_name = "chemical interactions" )
plot( ctd, index_name = "chemical", filter.score = 3 )
plot( ctd, index_name = "chemical", filter.score = 1 )
plot( ctd, index_name = "chemical", filter.score = 2 )
plot( ctd, index_name = "gene-gene interaction",
representation = "network", main = "APOE-like gene-gene interactions" )
plot( ctd, index_name = "kegg pathways",
representation = "network", main = "KEGG pathways related to APOE genes" )
library(imputeLCMD)
ls()
ls(2)
?impute.MinDet
?generate.ExpressionData
exprsDataObj = generate.ExpressionData(nSamples1 = 6, nSamples2 = 6,
meanSamples = 0, sdSamples = 0.2,
nFeatures = 100, nFeaturesUp = 50,
nFeaturesDown = 50,
meanDynRange = 20, sdDynRange = 1,
meanDiffAbund = 1, sdDiffAbund = 0.2)
exprsDataObj
exprsDataObj = generate.ExpressionData(nSamples1 = 6, nSamples2 = 6,
meanSamples = 0, sdSamples = 0.2,
nFeatures = 100, nFeaturesUp = 10,
nFeaturesDown = 10,
meanDynRange = 20, sdDynRange = 1,
meanDiffAbund = 1, sdDiffAbund = 0.2)
exprsData = exprsDataObj[[1]]
m.THR = quantile(exprsData, probs = 0.15)
sd.THR = 0.1
MNAR.rate = 100
exprsData.MD.obj = insertMVs(exprsData,m.THR,sd.THR,MNAR.rate)
exprsData.MD = exprsData.MD.obj[[2]]
exprsData.MD
m.THR
exprsData[79:83, 5]
set.seed(1234)
imp1 <- impute.QRILC(exprsData.MD)
names(imp1)
imp1
o <- is.na(exprsData.MD[,1])
o
exprsData.MD[,1]
imp1[o,1]
dim(imp1
)
set.seed(1234)
imp1 <- impute.QRILC(exprsData.MD)[[1]]
imp1[o,1]
m.THR
exprsData[o,1]
exprsData.MD
exprsData.MD[,1]
runif(1)
runif(1, 0, 0.2)
runif(1, 0, 0.2) * 100
ceiling(runif(1, 0, 0.2) * 100)
exprsData.MD.NA <- exprsData.MD
for (i in 1:6) {
ii <- sample(1:100, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[ii,i] <- NA
}
exprsData.MD.NA <- exprsData.MD
for (i in 1:6) {
ii <- sample(1:100, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[ii,i] <- NA
}
set.seed(1234)
imp2 <- impute.QRILC(exprsData.MD.NA)[[1]]
o <- is.na(exprsData.MD.NA[,1])
exprsData.MD.NA[,1]
imp1[o,1]
any(imp1[o,1] > m.THR)
o <- is.na(exprsData.MD[,1])
exprsData.MD[,1]
any(imp1[o,1] > m.THR)
i<-1
o <- is.na(exprsData.MD[i,])
o
dim(exprsData.MD)
any(imp1[o,1] > m.THR)
any(imp1[i,o] > m.THR)
for (i in 1:100) {
o <- is.na(exprsData.MD[i,])
any(imp1[i,o] > m.THR)
}
exprsData.MD.NA <- exprsData.MD
out <- rep(NA, 100)
for (i in 1:100) {
o <- is.na(exprsData.MD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
i<-49
exprsData.MD[i,]
m.THR
exprsData[i,]
MNAR.rate = 0
exprsData.MD.obj = insertMVs(exprsData,m.THR,sd.THR,MNAR.rate)
exprsData.MD = exprsData.MD.obj[[2]]
set.seed(1234)
imp1 <- impute.QRILC(exprsData.MD)[[1]]
out <- rep(NA, 100)
for (i in 1:100) {
o <- is.na(exprsData.MD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
exprsData.MD.NA <- exprsData.MD
exprsData[i,]
out
i
exprsData.MD[i,]
exprsData[i,]
m.THR
rowMeans(exprsData)
set.seed(1234)
exprsDataObj = generate.ExpressionData(nSamples1 = 100, nSamples2 = 100,
meanSamples = 0, sdSamples = 0.2,
nFeatures = 40, nFeaturesUp = 10,
nFeaturesDown = 10,
meanDynRange = 20, sdDynRange = 1,
meanDiffAbund = 1, sdDiffAbund = 0.2)
exprsData = exprsDataObj[[1]]
m.THR = quantile(exprsData, probs = 0.15)
m.THR
exprsData.MD <- exprsData
for (i in 1:100) {
t1 <- exprsData.MD[i,]
t2 <- t1[is.na(t1)]
exprsData.MD[i, t2] <- NA
}
sd.THR = 0.1
dim(exprsData)
for (i in 1:40) {
t1 <- exprsData.MD[i,]
t2 <- t1[is.na(t1)]
exprsData.MD[i, t2] <- NA
}
exprsData[1,]
exprsData[2,]
exprsData[3,]
m.THR <- quantile(exprsData[i,], probs = 0.15)
m.THR
exprsData.MD <- exprsData
for (i in 1:40) {
t1 <- exprsData.MD[i,]
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
sd.THR = 0.1
exprsData.MD[1,]
exprsData.MD[2,]
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
t1 <- exprsData.LD[i,]
t2 <- t1[t1 < m.THR ]
m.THR <- quantile(exprsData[i,], probs = 0.25)
m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
m.THR <- quantile(t1, probs = 0.25)
m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.25)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.05)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.35)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
dim(exprsData)
t1
set.seed(1234)
set.seed(1234)
set.seed(1234)
exprsDataObj = generate.ExpressionData(nSamples1 = 100, nSamples2 = 100,
meanSamples = 0, sdSamples = 0.5,
nFeatures = 40, nFeaturesUp = 10,
nFeaturesDown = 10,
meanDynRange = 20, sdDynRange = 1,
meanDiffAbund = 1, sdDiffAbund = 0.2)
exprsData = exprsDataObj[[1]]
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.35)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
exprsData.NA <- exprsData.LD
for (i in 1:40) {
ii <- sample(1:200, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[i,ii] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
m.THR
t1
summary(t1)
m.THR
t1
summary(t1)
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
t2 <- t1 < m.THR
exprsData.MD[i, t2] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
summary(t1)
m.tHR
m.THR
t1 < m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = runif(1, 0, 0.2)
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
# Check whether the imputed values are below the LD
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
# Generate missing at random (equal to value 3)
exprsData.NA <- exprsData.LD
for (i in 1:40) {
ii <- sample(1:200, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[i,ii] <- NA
}
set.seed(1234)
imp2 <- impute.QRILC(exprsData.MD.NA)[[1]]
o <- is.na(exprsData.MD.NA[,1])
exprsData.MD.NA[,1]
imp1[o,1]
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = runif(1, 0, 0.2))
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
imp1[1,]
o <- is.na(exprsData.LD[,1])
exprsData.LD[1,]
imp1[o,1]
exprsData.LD <- exprsData
m.THR <- rep(NA, 40)
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR[i] <- quantile(t1, probs = runif(1, 0, 0.2))
exprsData.LD[i, t1 < m.THR[i]] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR[i])
}
out
o <- is.na(exprsData.LD[,3])
exprsData.LD[3,]
imp1[o,3]
imp1[3,o]
?impute.QRILC
load("c:/Juan/CREAL/HELIX/final_data/transcriptome_subcohort_v1.RData")
ls()
transcriptome_subcohort
names(pData(transcriptome_subcohort))
design <- model.matrix(~ e3_sex, transcriptome_subcohort)
fit <- lmFit(huangArrayRMAnoBatchCommon.eset, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
library(limma)
fit <- lmFit(huangArrayRMAnoBatchCommon.eset, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
names(pData(transcriptome_subcohort))
design <- model.matrix(~ e3_sex + cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
names(tt)
design <- model.matrix(~ cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
design <- model.matrix(~ e3_sex + cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
tt <- topTable(fit, coef=2)
tt$logFC
library(sizepower)
BiocInstaller::biocLite("sizepower")
library(sizepower)
ls(2)
?power.multi
?power.randomized
library(sizepower)
marraypwr <- matrix(NA_real_, nrow=length(fdr), ncol=length(effectSizes),
dimnames=list(sprintf("%d%%", 100*fdr), effectSizes))
ls()
ls(2)
p1
effectSizes <- seq(0.05, 0.25, by=0.10)
effectSizes
2/100
path <- "c:/juan/temp/Course_multiomic/"
load(file.path(path, "/data/nci60.Rdata"))
J <- 3
X1 <- t(nci60$mrna)
X2 <- t(nci60$miRNA)
X3 <- t(nci60$prot)
library(OmicsPLS)
cc.method1 <- crossval_o2m(X1, X3, a = 1:2, ax = 1:3,
ay = 1:3,
nr_folds = 5, nr_cores = 1)
cc.method1
?crossval_o2m
cc.method1 <- crossval_o2m(X1, X3, a = 2, ax = 1:7,
ay = 1:7,
nr_folds = 5, nr_cores = 1)
cc.method1
setwd("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables")
load("data_exercises/nci60.Rdata")
miRNA <- nci60$miRNA
pca.miRNA <- ord(miRNA, classvec=cancer)
library(made4)
load("data_exercises/nci60.Rdata")
miRNA <- nci60$miRNA
pca.miRNA <- ord(miRNA, classvec=cancer)
plot(pca.miRNA, nlab=5)
topgenes(pca.miRNA, axis=1, n=5, ends="neg")
ax1.pos <- topgenes(pca.miRNA, axis=1, n=5, ends="pos")
ax2.pos <- topgenes(pca.miRNA, axis=2, n=5, ends="pos")
ax1.pos <- topgenes(pca.miRNA, axis=1, n=5, ends="pos")
ax2.pos <- topgenes(pca.miRNA, axis=2, n=5, ends="pos")
intersect(ax1.pos, ax2.pos)
summary(pca.miRNA$ord)
plot(pca.miRNA, axis1 = 3, axis2=4)
searh()
search()
library(cluster)
ls(2)
setwd("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables")
load("data_exercises/diet.Rdata")
X <- cbind(X2, X3)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
par(mfrow=c(2,2))
plot(silhouette(cutree(dd.h,2), dd))
for (i in 2:5)
plot(silhouette(cutree(dd.h,i), dd))
for (i in 2:5)
plot(silhouette(cutree(dd.h,i), dd))
par(mfrow=c(2,2))
for (i in 2:5)
plot(silhouette(cutree(dd.h,i), dd))
groups <- as.factor(cutree(dd.h, 5))
table(groups)
plot(dd.h)
plot(dd.h)
dd.pam <- pam(dd, 3)
plot(dd.pam)
X <- X3
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- X2
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- log(X2)
dd <- dist(X)
dd.h <- hclust(dd)
X <- cbind(X2, X3)
X <- log(X)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- scale(X)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- cbind(X2, X3)
X <- scale(X)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- cbind(X2, X3)
X <- scale(X)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- scale(X3)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- cbind(X2, X3)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
groups <- as.factor(cutree(dd.h, 3))
table(groups)
XX <- X[-groups==3,]
XX <- X[-groups=="3",]
XX <- X[groups!="3",]
dd <- dist(XX)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- cbind(X2, X3)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
table(groups, X1$tipocancer)
X <- X[X1$tipocancer=="Control",]
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
X <- cbind(X2, X3)
dd <- dist(X)
dd.h <- hclust(dd)
plot(dd.h, labels=FALSE)
groups <- as.factor(cutree(dd.h, 3))
table(groups)
mod <- glm(casoc ~ groups + peso + sexo + Colesterol,
data=X1, family="binomial")
summary(mod)
table(groups)
exp(0.36)
library(compareGroups)
X$groups <- as.factor(groups)
mm <- compareGroups(groups ~ ., X)
createTable(mm)
