t1 <- exprsData.LD[i,]
t2 <- t1[t1 < m.THR ]
m.THR <- quantile(exprsData[i,], probs = 0.25)
m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
m.THR <- quantile(t1, probs = 0.25)
m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.25)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.05)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.35)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
dim(exprsData)
t1
set.seed(1234)
set.seed(1234)
set.seed(1234)
exprsDataObj = generate.ExpressionData(nSamples1 = 100, nSamples2 = 100,
meanSamples = 0, sdSamples = 0.5,
nFeatures = 40, nFeaturesUp = 10,
nFeaturesDown = 10,
meanDynRange = 20, sdDynRange = 1,
meanDiffAbund = 1, sdDiffAbund = 0.2)
exprsData = exprsDataObj[[1]]
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.35)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.MD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
exprsData.NA <- exprsData.LD
for (i in 1:40) {
ii <- sample(1:200, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[i,ii] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
t2 <- t1[t1 < m.THR ]
exprsData.MD[i, t2] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
m.THR
t1
summary(t1)
m.THR
t1
summary(t1)
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
t2 <- t1 < m.THR
exprsData.MD[i, t2] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
summary(t1)
m.tHR
m.THR
t1 < m.THR
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = 0.15)
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = runif(1, 0, 0.2)
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
# Check whether the imputed values are below the LD
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
# Generate missing at random (equal to value 3)
exprsData.NA <- exprsData.LD
for (i in 1:40) {
ii <- sample(1:200, ceiling(runif(1, 0, 0.2) * 100))
exprsData.MD.NA[i,ii] <- NA
}
set.seed(1234)
imp2 <- impute.QRILC(exprsData.MD.NA)[[1]]
o <- is.na(exprsData.MD.NA[,1])
exprsData.MD.NA[,1]
imp1[o,1]
exprsData.LD <- exprsData
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR <- quantile(t1, probs = runif(1, 0, 0.2))
exprsData.LD[i, t1 < m.THR] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR)
}
out
imp1[1,]
o <- is.na(exprsData.LD[,1])
exprsData.LD[1,]
imp1[o,1]
exprsData.LD <- exprsData
m.THR <- rep(NA, 40)
for (i in 1:40) {
t1 <- exprsData.LD[i,]
m.THR[i] <- quantile(t1, probs = runif(1, 0, 0.2))
exprsData.LD[i, t1 < m.THR[i]] <- NA
}
apply(exprsData.LD, 1, function(x) sum(is.na(x)))
set.seed(1234)
imp1 <- impute.QRILC(exprsData.LD)[[1]]
out <- rep(NA, 40)
for (i in 1:40) {
o <- is.na(exprsData.LD[i,])
out[i] <- any(imp1[i,o] > m.THR[i])
}
out
o <- is.na(exprsData.LD[,3])
exprsData.LD[3,]
imp1[o,3]
imp1[3,o]
?impute.QRILC
load("c:/Juan/CREAL/HELIX/final_data/transcriptome_subcohort_v1.RData")
ls()
transcriptome_subcohort
names(pData(transcriptome_subcohort))
design <- model.matrix(~ e3_sex, transcriptome_subcohort)
fit <- lmFit(huangArrayRMAnoBatchCommon.eset, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
library(limma)
fit <- lmFit(huangArrayRMAnoBatchCommon.eset, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
names(pData(transcriptome_subcohort))
design <- model.matrix(~ e3_sex + cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
names(tt)
design <- model.matrix(~ cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
design <- model.matrix(~ e3_sex + cohort, transcriptome_subcohort)
fit <- lmFit(transcriptome_subcohort, design)
fit <- eBayes(fit)
tt <- topTable(fit)
sigmaD <- sd(tt$logFC)
sigmaD
tt <- topTable(fit, coef=2)
tt$logFC
library(sizepower)
BiocInstaller::biocLite("sizepower")
library(sizepower)
ls(2)
?power.multi
?power.randomized
library(sizepower)
marraypwr <- matrix(NA_real_, nrow=length(fdr), ncol=length(effectSizes),
dimnames=list(sprintf("%d%%", 100*fdr), effectSizes))
ls()
ls(2)
p1
effectSizes <- seq(0.05, 0.25, by=0.10)
effectSizes
2/100
path <- "c:/juan/temp/Course_multiomic/"
load(file.path(path, "/data/nci60.Rdata"))
J <- 3
X1 <- t(nci60$mrna)
X2 <- t(nci60$miRNA)
X3 <- t(nci60$prot)
library(OmicsPLS)
cc.method1 <- crossval_o2m(X1, X3, a = 1:2, ax = 1:3,
ay = 1:3,
nr_folds = 5, nr_cores = 1)
cc.method1
?crossval_o2m
cc.method1 <- crossval_o2m(X1, X3, a = 2, ax = 1:7,
ay = 1:7,
nr_folds = 5, nr_cores = 1)
cc.method1
?RGCCA
?rgcca
library(RGCCA)
?rgcca
ls(2)
library(omicade4)
ans.mcia <- mcia(nci60, cia.nf = 2)
plot.mcia(ans.mcia, sample.lab = TRUE,
phenovec = cancer,
gene.nlab = 2, sample.legend = FALSE)
load("/data_exercises/nci60.Rdata"))
load("/data_exercises/nci60.Rdata")
setwd("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables/")
load("/data_exercises/nci60.Rdata")
setwd("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables/")
load("/data_exercises/nci60.Rdata")
load("data_exercises/nci60.Rdata")
library(omicade4)
ans.mcia <- mcia(nci60, cia.nf = 2)
plot.mcia(ans.mcia, sample.lab = TRUE,
phenovec = cancer,
gene.nlab = 2, sample.legend = FALSE)
plot.mcia(ans.mcia, sample.lab = TRUE,
phenovec = cancer,
gene.nlab = 2, sample.legend = FALSE
df.color =c("cyan", "magenta", "red4"))
plot.mcia(ans.mcia, sample.lab = TRUE,
phenovec = cancer,
gene.nlab = 2, sample.legend = FALSE,
df.color =c("cyan", "magenta", "red4"))
plot.mcia(ans.mcia, sample.lab = TRUE,
phenovec = cancer,
gene.nlab = 5, sample.legend = FALSE,
df.color =c("cyan", "magenta", "red4"))
topVar(ans.mcia, axis=1, topN=5, end="pos")
topVar(ans.mcia, axis=2, topN=5, end="neg")
topVar(ans.mcia, axis=2, topN=5, end="pos")
load("data_exercises/diet.Rdata")
X2.comp <- X2[sel,]
X3.comp <- X3[sel,]
sel <- complete.cases(X2) & complete.cases(X3)
X2.comp <- X2[sel,]
X3.comp <- X3[sel,]
X <- list(nut=t(X2.comp), food=t(X3.comp))
mm <- mcia(X)
plot(mm, df.col=c("red", "blue"), gene.nlab = 2)
summary(X3$gra_caloricdrinks)
summary(X3$gra_procmeat)
X2.comp <- scale(X2[sel,])
X3.comp <- scale(X3[sel,])
X <- list(nut=t(X2.comp), food=t(X3.comp))
mm <- mcia(X)
plot(mm, df.col=c("red", "blue"), gene.nlab = 2)
topVar(mm, axis = 1, end = "neg")
which(names(X2=="t_ethanol"))
which(names(X2)=="t_ethanol"))
which(names(X2)=="t_ethanol")
X2.comp <- scale(X2[sel, -which(names(X2)=="t_ethanol")])
X3.comp <- scale(X3[sel,])
X <- list(nut=t(X2.comp), food=t(X3.comp))
mm <- mcia(X)
plot(mm, df.col=c("red", "blue"), gene.nlab = 2)
XX <- cbind(X2, X3)[sel,]
XX <- scale(XX)
mm2 <- ord(t(XX))
library(made4)
XX <- cbind(X2, X3)[sel,]
XX <- scale(XX)
mm2 <- ord(t(XX))
plotgenes(mm2, nlab = 4)
plotgenes(mm2, nlab = 4)
search()
ls(8)
C <-  matrix(c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0), nrow=4, ncol=4)
C
p1 <- tau.estimate(X1)
p2 <- tau.estimate(X2)
p3 <- tau.estimate(X3)
p2
p3
?tau.estimate
p2 <- tau.estimate(X2)
p2
tau.estimate
X2
dim(X2)
X1 <- t(nci60$mrna)
X2 <- t(nci60$miRNA)
X3 <- t(nci60$prot)
p2 <- tau.estimate(X2)
p2
p1 <- tau.estimate(X1)
p1
p3 <- tau.estimate(X3)
p3
c(p1,p2,p3,2)
sgcca.nci60 <- sgcca(A, C, c1 = c(p1, p2, p3, 2),
ncomp = c(2, 2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
A <- list(X1, X2, X3, Y)
lapply(A, dim)
Y <- model.matrix( ~ cancer)[,-1]
A <- list(X1, X2, X3, Y)
lapply(A, dim)
sgcca.nci60 <- sgcca(A, C, c1 = c(p1, p2, p3, 2),
ncomp = c(2, 2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(A, C, c1 = c(p1, p2, p3, 1),
ncomp = c(2, 2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
plotInd(sgcca.nci60, cancer)
source("Day3-integration_multiple_tables/R/plotInd.R")
source("Day3-integration_multiple_tables/R/selectVars.R")
plotInd(sgcca.nci60, cancer)
selectVars(sgcca.nci60, table=1, axis=1, end="pos")
length(selectVars(sgcca.nci60, table=1, axis=1, end="pos"))
length(selectVars(sgcca.nci60, table=1, axis=1, end="neg"))
length(selectVars(sgcca.nci60, table=1, axis=1, end="neg"))
length(selectVars(sgcca.nci60, table=1, axis=2, end="neg"))
sgcca.nci60 <- sgcca(A, C, c1 = c(0.06, p2, p3, 1),
ncomp = c(2, 2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
length(selectVars(sgcca.nci60, table=1, axis=1, end="neg"))
length(selectVars(sgcca.nci60, table=1, axis=1, end="pos"))
load("data_exercises/diet.Rdata")
sel <- complete.cases(X2) & complete.cases(X3)
X2.comp <- scale(X2[sel, -which(names(X2)=="t_ethanol")])
X3.comp <- scale(X3[sel,])
X <- list(nut=t(X2.comp), food=t(X3.comp))
Y <- X1$casoc
Y
table(Y)
sel <- complete.cases(X2) & complete.cases(X3) & complete.cases(X1$casoc)
X2.comp <- scale(X2[sel, -which(names(X2)=="t_ethanol")])
X3.comp <- scale(X3[sel,])
Y <- X1$casoc[sel]
Y <- as.numeric(X1$casoc[sel])-1
Y
X <- list(nut=t(X2.comp), food=t(X3.comp), casoc=Y)
C <-  matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), nrow=3, ncol=3)
C
sgcca.nci60 <- sgcca(A, C, c1 = c(0, 0, 1),
ncomp = c(2, 2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(0, 0, 1),
ncomp = c(2, 2, 2),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(0, 0, 1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(1, 1, 1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(0.6, 0.6, 1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(0.6, 0.6, .1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
sgcca.nci60 <- sgcca(X, C, c1 = c(0.6, 0.6, 1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
Y
Y <- model.matrix(~X1$casoc[sel])[,-1]
X <- list(nut=t(X2.comp), food=t(X3.comp), casoc=Y)
C <-  matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), nrow=3, ncol=3)
C
sgcca.nci60 <- sgcca(X, C, c1 = c(0.6, 0.6, 1),
ncomp = c(1, 1, 1),
scheme = "centroid",
scale = TRUE,
verbose = FALSE)
mydag <- ggm::DAG(Colesterol~casoc+gra_procmeat, gra_procmeat~casoc)
mydag
pp <- "c:/juan/CREAL/GitHub/biomarkers_multiple_tables/"
load(file.path(pp, "data_exercises/diet.Rdata"))
vars1 <- c("casoc", "sexo", "peso", "mets_10a", "Colesterol")
X <- cbind(X1[, vars1],  X3[,1:6])
mydat <- X[complete.cases(X),]
names(mydat)
dd <- c("binomial", "binomial", "gaussian", "gaussian", "binomial",
rep("gaussian", 6))
dd
names(dd) <- c(vars1, names(X3)[1:6])
mydists <- as.list(dd)
mydists
ban <- retain <- matrix(0, nrow=ncol(mydat), ncol=ncol(mydat))
colnames(ban) <- rownames(ban) <- names(mydat)
colnames(retain) <- rownames(retain) <- names(mydat)
ii <- rep(5, ncol(mydat))
names(ii) <- names(mydat)
max.par <- as.list(ii)
mycache<-buildscorecache(data.df=mydat, data.dists=mydists,
dag.banned=ban, dag.retained=retain,
max.parents = max.par)
library(abn)
mycache<-buildscorecache(data.df=mydat, data.dists=mydists,
dag.banned=ban, dag.retained=retain,
max.parents = max.par)
mp.dag<-mostprobable(score.cache=mycache)
mod.best <- fitabn(dag.m=mp.dag, data.df=mydat,
data.dists=mydists, create.graph=TRUE)
mod.best$mlik
plot(mod.best$graph)
graph::plot(mod.best$graph)
install.packages("sobel")
install.packages("multilevel")
library(multilevel)
ls(2)
?sobel
names(lusc)
ls()
data(bh1996)
bh1996
head(bh1996)
library(CIT)
install.packages("CIT")
library(cit)
ls()
ls(2)
args(cit.bp)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
load("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables/data/lusc.Rdata")
cit.bp(lusc$LOY,lusc[,3:12], lusc$Cancer)
cit.bp(lusc$LOY,lusc[,3:12], lusc[,"Cancer"])
cit.bp(lusc$LOY,lusc[,3:12], lusc[,"Cancer",drop=FALSE])
cit.bp(lusc[,"LOY",drop=FALSE],lusc[,3:12], lusc[,"Cancer",drop=FALSE])
lusc[,"Cancer",drop=FALSE]
cit.bp(lusc[,"LOY",drop=FALSE],lusc[,3:12], lusc[,"Cancer",drop=FALSE])
lusc[,3:12]
cit.bp(lusc[,"LOY",drop=FALSE],lusc[,3:12], lusc[,"Cancer",drop=FALSE])
args(cit.bp)
cit.bp(lusc[,"LOY",drop=FALSE],lusc[,3,drop=FALSE], lusc[,"Cancer",drop=FALSE])
?cit.bp
with(lusc, cit.bp(LOY, SFSF, Cancer, age)
)
with(lusc, cit.bp(LOY, lusc[,3], Cancer, age))
with(lusc, cit.bp(LOY, lusc[,3], Cancer))
load("c:/Juan/CREAL/GitHub/biomarkers_multiple_tables/data_exercises/diet.Rdata")
ls()
names(X1)
names(X2)
names(X3)
library(compareGroups)
ls(2)
